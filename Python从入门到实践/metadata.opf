<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id" version="2.0">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">5</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">f1dbc87a-ac35-43bb-89f5-bda8ca78e2ce</dc:identifier>
        <dc:title>Python编程：从入门到实践（第2版）（新版上线！！！！沿袭第1版讲解清晰透彻、循序渐进的特点，并全面升级！源代码文件+视频讲解+配套编程环境，零基础自学Python一本就够！）（图灵图书）</dc:title>
        <dc:creator opf:file-as="埃里克·马瑟斯" opf:role="aut">埃里克·马瑟斯</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (6.11.0) [https://calibre-ebook.com]</dc:contributor>
        <dc:date>2020-09-30T16:00:00+00:00</dc:date>
        <dc:publisher>人民邮电出版社</dc:publisher>
        <dc:identifier opf:scheme="ISBN">9787115546081</dc:identifier>
        <dc:identifier opf:scheme="MOBI-ASIN">B08LGHY8Y2</dc:identifier>
        <dc:language>zho</dc:language>
        <meta name="calibre:author_link_map" content="{&quot;埃里克·马瑟斯&quot;: &quot;&quot;}"/>
        <meta name="calibre:timestamp" content="2023-04-17T13:08:30+00:00"/>
        <meta name="calibre:title_sort" content="Python编程：从入门到实践（第2版）（新版上线！！！！沿袭第1版讲解清晰透彻、循序渐进的特点，并全面升级！源代码文件+视频讲解+配套编程环境，零基础自学Python一本就够！）（图灵图书）"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1970/166/1:31&quot;, &quot;highlighted_text&quot;: &quot;临时变量&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1970/166/1:27&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T21:30:50.834Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 4 章 操作列表&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;CimcWldz2_FAUsHOBdll7w&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1970/306/1:95&quot;, &quot;highlighted_text&quot;: &quot;range() 只打印数1～4。这是编程语言中常见的差一行为的结果。函数range() 让Python从指定的第一个值开始数，并在到达你指定的第二个值时停止。因为它在第二个值处停止，所以输出不包含该值&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1970/306/2/1:0&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T21:49:36.909Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 4 章 操作列表&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;EGBroHnWry0bQ_OBDx67dA&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1924/1:99&quot;, &quot;highlighted_text&quot;: &quot;这种语法很有用，因为你经常需要在不知道列表长度的情况下访问最后的元素。这种约定也适用于其他负数索引。例如，索引-2 返回倒数第二个列表元素，索引-3 返回倒数第三个列表元素，依此类推。&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1924/1:9&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T13:35:54.597Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 3 章 列表简介&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;GMh8iJ6m8T06lKF8qgWydA&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1970/130/1:143&quot;, &quot;highlighted_text&quot;: &quot;需要对列表中的每个元素都执行相同的操作时，可使用Python中的for 循环。&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1970/130/1:106&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T21:25:44.542Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 4 章 操作列表&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;PMqBzxPLaFsRyAiXDKYkMQ&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1970/6/14/1:94&quot;, &quot;highlighted_text&quot;: &quot;如果你不确定该使用del 语句还是pop() 方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del 语句；如果你要在删除元素后还能继续使用它，就使用方法pop() 。&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1970/6/14/1:0&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T13:53:24.056Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 3 章 列表简介&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;S-Y6s3il1kQ5t7xQ496-TQ&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1970/164/1:89&quot;, &quot;highlighted_text&quot;: &quot;刚开始使用循环时请牢记，对列表中的每个元素，都将执行循环指定的步骤，而不管列表包含多少个元素。如果列表包含一百万个元素，Python就重复执行指定的步骤一百万次，且通常速度非常快&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1970/164/1:0&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T21:30:23.812Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 4 章 操作列表&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;f-jBPUioj8zmaPDIof4qDg&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1970/170/1:66&quot;, &quot;highlighted_text&quot;: &quot;这些命名约定有助于你明白for 循环中将对每个元素执行的操作。使用单数和复数式名称，可帮助你判断代码段处理的是单个列表元素还是整个列表。&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1970/170/1:0&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T21:31:13.770Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 4 章 操作列表&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;pBlSkPVk8LPH59K-QMAb6A&quot;}}"/>
        <meta name="calibre:annotation" content="{&quot;format&quot;: &quot;MOBI&quot;, &quot;user_type&quot;: &quot;local&quot;, &quot;user&quot;: &quot;viewer&quot;, &quot;annotation&quot;: {&quot;end_cfi&quot;: &quot;/2/4/1964/2/20/1:93&quot;, &quot;highlighted_text&quot;: &quot;这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中存储哪些数据。为控制用户，可首先创建一个空列表，用于存储用户将要输入的值，然后将用户提供的每个新值附加到列表中。&quot;, &quot;spine_index&quot;: 1, &quot;spine_name&quot;: &quot;text/part0000.html&quot;, &quot;start_cfi&quot;: &quot;/2/4/1964/2/20/1:0&quot;, &quot;style&quot;: {&quot;kind&quot;: &quot;color&quot;, &quot;type&quot;: &quot;builtin&quot;, &quot;which&quot;: &quot;yellow&quot;}, &quot;timestamp&quot;: &quot;2023-06-07T13:49:41.931Z&quot;, &quot;toc_family_titles&quot;: [&quot;第 3 章 列表简介&quot;], &quot;type&quot;: &quot;highlight&quot;, &quot;uuid&quot;: &quot;qePsWmLkHvtphMnoJSDWZQ&quot;}}"/>
    </metadata>
    <guide>
        <reference type="cover" title="封面" href="cover.jpg"/>
    </guide>
</package>
